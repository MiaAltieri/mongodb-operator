# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
mongodb_lib_path = {tox_root}/lib/charms/mongodb/
all_path = {[vars]src_path} {[vars]tests_path} {[vars]mongodb_lib_path}

[testenv]
set_env =
    PYTHONPATH = {[vars]src_path}:{tox_root}/lib
    PY_COLORS=1
    PYTHONDONTWRITEBYTECODE=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS

[testenv:build-{production,dev,wrapper}]
# Wrap `charmcraft pack`, TODO support poetry on this charm, this is a non-supported usage of the
# build wrapper.
pass_env =
    CI
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
    charmcraftcache
    mv
commands_pre =
    # TODO charm versioning: Remove
    # Workaround to add unique identifier (git hash) to charm version while specification
    # DA053 - Charm versioning
    # (https://docs.google.com/document/d/1Jv1jhWLl8ejK3iJn7Q3VbCIM9GIhp8926bgXpdtx-Sg/edit?pli=1)
    # is pending review.
    python -c 'import pathlib; import shutil; import subprocess; git_hash=subprocess.run(["git", "describe", "--always", "--dirty"], capture_output=True, check=True, encoding="utf-8").stdout; file = pathlib.Path("charm_version"); shutil.copy(file, pathlib.Path("charm_version.backup")); version = file.read_text().strip(); file.write_text(f"{version}+{git_hash}")'
    # TODO comment this back in when charm supports poetry. poetry export --only main,charm-libs --output requirements.txt

commands =
    build-production: charmcraft pack {posargs}
    build-dev: charmcraftcache pack {posargs}
commands_post =
    # TODO comment this back in when charm supports poetry. mv requirements.txt requirements-last-build.txt
    mv charm_version.backup charm_version

[testenv:format]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell==2.2.5 # current version reports incorrectly reports issues in string names and function names
commands =
    codespell {[vars]all_path} --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache --skip {tox_root}/src/grafana_dashboards
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}  --exclude tests/integration/*/lib/* 
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    requests
    pytest-mock
    juju==3.4.0.0
    coverage[toml]
    parameterized
    jinja2==3.1.3
    -r {tox_root}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    coverage report

[testenv:integration]
description = Run all integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
    SECRETS_FROM_GITHUB
allowlist_externals =
    {[testenv:build-wrapper]allowlist_externals}
deps =
    pytest
    juju==3.4.0.0
    pytest-mock
    pytest-operator ==0.34.0
    git+https://github.com/canonical/data-platform-workflows@v13.1.1\#subdirectory=python/pytest_plugins/github_secrets
    git+https://github.com/canonical/data-platform-workflows@v13.1.1\#subdirectory=python/pytest_plugins/pytest_operator_groups
    git+https://github.com/canonical/data-platform-workflows@v13.1.1\#subdirectory=python/pytest_plugins/pytest_operator_cache
    -r {tox_root}/requirements.txt
commands =
    pytest -v --tb native --log-cli-level=INFO -s --ignore={[vars]tests_path}/unit/ {posargs}

[testenv:cleanup_juju_models]
description = Cleanup Juju models
commands =
    python {[vars]tests_path}/integration/cleanup_resources.py
